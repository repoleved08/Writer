@page "/Log"
@	using BlazorApp1.Models.Authentication
@	using BlazorApp1.Services.Auth
@	using Blazored.LocalStorage;
@	using Microsoft.AspNetCore.Components.Authorization;
	using WriterFrontEnd.Services.Auth;
	using WriterFrontEnd.Models.Authentication;
@inject IAuthentInterface authInterface
@inject ILocalStorageService localstorage
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navigationManager


<div class="container">
    <div class="columns mt-5">
        <h1 class="pl-6">Login User</h1>
        <div class="column is-5">
            <div class="columns is-flex is-flex-direction-column">
                <div class="column">
                    <label for="email">Email</label>
                    <input class="input is-primary" @bind-value="@user.Email" type="text" placeholder="Email address">
                </div>
                <div class="column">
                    <label for="Name">Password</label>
                    <input class="input is-primary" @bind-value="@user.Password" type="password" placeholder="Password">
                    <a href="#" class="is-size-7 has-text-primary">forget password?</a>
                </div>
                <div class="column">
                    <button class="button is-primary is-fullwidth" @onclick="LoginU" type="submit">Login</button>
                </div>
                <div class="has-text-centered">
                    <p class="is-size-7">
                        Don't have an account? <a href="/RegisterUser" class="has-text-primary">
                            Sign
                            up
                        </a>
                    </p>
                </div>
            </div>
        </div>
        <div class="column is-5">
            <img src="#" alt="bulma login page">
        </div>
    </div>
</div>

@code {
    private LoginDto user = new LoginDto();

    private async Task LoginU()
    {
        var res = await authInterface.LoginUser(user);
        Console.WriteLine(res.Token);
        if (!string.IsNullOrWhiteSpace(res.Token))
        {
            await localstorage.SetItemAsStringAsync("authToken", res.Token);
            await authStateProvider.GetAuthenticationStateAsync();
            //navigationManager.NavigateTo("");
        }
    }
}